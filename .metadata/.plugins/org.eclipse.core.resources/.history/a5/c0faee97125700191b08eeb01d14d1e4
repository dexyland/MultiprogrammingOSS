package os;

public class Memory implements Runnable{
	
	/* Array representing memory. Each location will store ID of a process 
	 * occupying it, '0' if OS is occupying it or '-1' if location is free. */
	
	public int[] locations;
	
	/* Used to calculate if more than 80% of memory is full */
	
	public int memoryOccupied;
	
	private Thread t;
	
	public Memory(){
		
		/* array of 256 members - 256MB */
		
		this.locations = new int[256];
		
		/* Initializing memory and storing OS at first 16 locations (16MB) */
		
		for (int i = 0; i < 256; i++){
			if (i <= 15){
				this.locations[i] = 0;
			}
			else {
				this.locations[i] = -1;
			}
			
		}
		
		this.memoryOccupied = 16;
		this.startMemoryController();
	}
	
	public int memoryAvailable(){
		return (int)Math.ceil((256.0 - this.memoryOccupied)/256*100);
	}
	
	public void startMemoryController() {
		System.out.println("Starting memory controller.");
	    if (t == null) {
	    	t = new Thread (this, "MemoryThread");
	        t.start();
	    }
	}
	
	/* Function used for checking if there is enough memory for the process 
	 * and writing data of a process into memory if there is enough available */
	
	public Boolean retieveBlock(int ID, int memory) {
		
		/* Going through memory searching for long enough
		 * contiguous block of available memory*/
		
		for (int i = 16; i < (255 - memory); i++) {
			if (this.locations[i] == -1) {
				int flag = 0;
				
				/* Checking if next 'memory' locations is available */
				
				for (int j = i+1; j < memory; j++){
					if (this.locations[j] != -1) {
						
						/* sets flag to 1 if current location is not available */
						
						flag = 1;
					}
				}
				
				if (flag == 0) {
					
					/* Writing ID of process occupying memory locations */
					
					for (int k = i; k < i + memory; k++){
						this.locations[k] = ID;
					}
					
					System.out.println("Process " + ID + " acquired memory!");
					
					return true;
				} else {
					return false;
				}
			}
		}
		
		System.out.println("Failed writing DATA! Process: " + ID);
		
		return false;
	}
	
	public Boolean requestMemory(int ID, int memory) {
		if (this.memoryOccupied + memory > 256) {
			System.out.println("Not enough memory available!");
			
			return false;
		} else if (retieveBlock(ID, memory)) {
			System.out.println("Memory request satisfied!");
			System.out.println("Memory available: " + this.memoryAvailable() + "%");
			
			return true;
		}
		
		return false;
	}
	
	public void freeMemory(int ID) {
		System.out.println("Deleting job " + ID + " from memory");
		for (int i = 16; i < 256; i++) {
			if (this.locations[i] == ID) {
				this.locations[i] = -1;
				this.memoryOccupied--;
			}
		}
		
		System.out.println("Process " + ID + " removed from memory");
		System.out.println("Memory available: " + this.memoryAvailable() + "%");
	}

	@Override
	public void run() {
		while(true){
			///System.out.println("Memory Occupied: " + this.memoryOccupied);
		}
		
	}
}