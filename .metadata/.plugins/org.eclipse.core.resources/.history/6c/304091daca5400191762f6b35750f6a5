import java.util.LinkedList;
import java.util.Queue;

/**
 * 
 */

/**
 * @author Dejan
 *
 */

interface wakeUpLTS{
	void wakeMeUp();
	void startLTS();
}

public class OS {
	public static void main(String[] args) {
		Timer timer = new Timer();
		wakeUpLTS callback = new LTS();
		processQueue pq = new processQueue();
		timer.register(callback);
		timer.startTimer();
		callback.startLTS();
		pq.startPrioritySystem();
	}

}

class LTS implements wakeUpLTS, Runnable{
	private Thread t;
	public void wakeMeUp(){
		System.out.println("Long term scheduler woke up!");
	}
	
	public void startLTS(){
		System.out.println("Starting Long term scheduler!");
	    if (t == null) {
	    	t = new Thread (this, "LTSThread");
	        t.start();
	    }
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
}

class Timer implements Runnable{
	public long time;
	private Thread t;
	private wakeUpLTS callback;
	
	public Timer(){
		this.time = 0;
	}
	
	public long getTime(){
		return this.time;
	}
	
	/* no setter for the time since since it runs independently */
	
	public void register(wakeUpLTS function){
		callback = function;
		System.out.println("Registered callback!");
	}
	
	public void startTimer(){
		System.out.println("Starting timer");
	    if (t == null) {
	    	t = new Thread (this, "timerThread");
	        t.start();
	    }
	}

	@Override
	public void run() {
		this.time = 0;
		
		while(true){
			time++;
			
			/* Waking up long term scheduler every 100ms */
			if (time%100 == 0){
				callback.wakeMeUp();
			}
			
			if (time == 10000){
				break;
			}
		}
		
	}
}

class memory implements Runnable{
	/* array of 256 members - 256MB */
	public int locations[];
	public int memoryOccupied;
	
	public memory(){
		/* Setting first 16 locations (16MB) to  0 - OS used
		 *                        and others to -1 - free locations */
		for (int i = 0; i < 256; i++){
			if (i <= 15){
				locations[i] = 0;
			}
			else {
				locations[i] = -1;
			}
			
		}
		memoryOccupied = 16;
	}
	
	public int memoryAvailable(){
		return (int)Math.ceil(memoryOccupied/256.0)*100;
	}

	@Override
	public void run() {
		while(true){
			System.out.println("MEMORYYYY");
		}
		
	}
}

class Process {
	private int id;
	private int priority;
	private int memory;
	private int time;
	
	public Process(int id){
		this.id = id;
	}
	
	public int getId(){
		return this.id;
	}
	
	public int getPriority(){
		return this.id;
	}
	
	public int getMemory(){
		return this.id;
	}
	
	public int getTime(){
		return this.id;
	}
	
	public void setId(int id){
		this.id = id;
	}
	
	public void setPriority(int priority){
		this.priority = priority;
	}
	
	public void setMemory(int memory){
		this.memory = memory;
	}
	
	public void setTime(int time){
		this.time = time;
	}
}


class processQueue implements Runnable{
	/* Priority queues that will be 
	 * used for storing processes */
	public Queue<Process> priorityQueue0;
	public Queue<Process> priorityQueue1;
	public Queue<Process> priorityQueue2;
	public Queue<Process> priorityQueue3;
	public Queue<Process> priorityQueue4;
	public Queue<Process> priorityQueue5;
	
	private Thread t;
	
	public processQueue(){
		/* Creating priority queues that will
		 *  be used for storing processes */
		this.priorityQueue0 = new LinkedList<>();
		this.priorityQueue1 = new LinkedList<>();
		this.priorityQueue2 = new LinkedList<>();
		this.priorityQueue3 = new LinkedList<>();
		this.priorityQueue4 = new LinkedList<>();
		this.priorityQueue5 = new LinkedList<>();
		
		System.out.println("Created priority queues!");
	}
	
	public void startPrioritySystem() {
		System.out.println("Starting priority system.");
	    if (t == null) {
	    	t = new Thread (this, "PQsystemThread");
	        t.start();
	    }
	}

	@Override
	public void run() {
		System.out.println("Priority system active!");
		while(true){
			System.out.println("QUEUEEEEE");
		}
	}
}
