/**
 * 
 */

/**
 * @author Dejan
 *
 */

interface wakeUpLTS {
	void wakeMeUp();
}

public class OS {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Timer timer = new Timer();
		wakeUpLTS callback = new LTS();
		timer.register(callback);
		timer.startTimer();

	}

}

class LTS implements wakeUpLTS{
	public void wakeMeUp(){
		System.out.println("Long term scheduler woke up!");
	}
}

class Timer{
	public long time;
	private wakeUpLTS callback;
	
	public Timer(){
		this.time = 0;
	}
	
	public long getTime(){
		return this.time;
	}
	
	/* no setter for the time since since it runs independently */
	
	public void register(wakeUpLTS function){
		callback = function;
		System.out.println("Registered callback!");
	}
	
	public void startTimer(){
		this.time = 0;
		
		while(true){
			time++;
			
			/* Waking up long term scheduler every 100ms */
			if (time%100 == 0){
				callback.wakeMeUp();
			}
		}
	}
}

class memory{
	/* array of 256 members - 256MB */
	public int locations[];
	public int memoryOccupied;
	
	public memory(){
		/* Setting first 16 locations (16MB) to  0 - OS used
		 *                        and others to -1 - free locations */
		for (int i = 0; i < 256; i++){
			if (i <= 15){
				locations[i] = 0;
			}
			else {
				locations[i] = -1;
			}
			
		}
		memoryOccupied = 16;
	}
	
	public int memoryAvailable(){
		return (int)Math.ceil(memoryOccupied/256.0)*100;
	}
}

