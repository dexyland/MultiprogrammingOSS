package os;

import java.util.ArrayList;

/* This class implements multiple level feedback queue which receives jobs 
 * from long term scheduler which are prioritized and stored in proper queue. 
 * short term scheduler takes first job from priority 0 queue if there is any.
 * System periodically takes care of upgrading and degrading processes. */

public class ProcessQueue implements PQcallback, Runnable{
	
	/**/
	
	private Memory memoryController;
	
	/* Priority queues that will be used for storing processes */
	
	/* Priority queues */
	
	public ArrayList<Process> priorityQueue0;
	public ArrayList<Process> priorityQueue1;
	public ArrayList<Process> priorityQueue2;

	/* Queue for storing jobs that require memory from long term scheduler */
	
	public ArrayList<Process> noMemoryQueue;
	
	/* Queue for storing finished jobs */
	public ArrayList<Process> finishedQueue;
	
	/* Thread class handling threading operations */
	
	private Thread t;
	
	/* Allow short term scheduler to get a job from queue. Prevents data race between queue 
	 * scheduler which upgrades and degrades processes priority and short term scheduler.*/
	
	private boolean queueAvailable;
	
	private int offset;
	
	/* class processQueue constructor */
	
	public ProcessQueue(){
		
		/* Creating memory controller */
		
		memoryController = new Memory();
		
		/* Creating priority queues that will be used for storing processes */
		
		this.priorityQueue0 = new ArrayList<Process>();
		this.priorityQueue1 = new ArrayList<Process>();
		this.priorityQueue2 = new ArrayList<Process>();
		this.noMemoryQueue = new ArrayList<Process>();
		this.finishedQueue = new ArrayList<Process>();
		this.queueAvailable = true;
		this.offset = 0;

		System.out.println("Created priority queues!");
		
		/* Creating processes and adding them to no memory queue */
		
		createProcesses();
		
		System.out.println("Created processes.");
	}
	
	public int getPQ0SIZE(){
		return this.priorityQueue0.size();
	}
	
	public int getPQ1SIZE(){
		return this.priorityQueue1.size();
	}
	
	public int getPQ2SIZE(){
		return this.priorityQueue2.size();
	}
	
	public int getFQSIZE(){
		return this.finishedQueue.size();
	}
	
	public int getINQSIZE(){
		return this.noMemoryQueue.size();
	}
	
	public int getMEMORY(){
		return this.memoryController.memoryAvailableNum();
	}
	
	/* LTS wakes up every 100mS. It check for available processes requesting memory */
	
	public void wakeUpLTS(long time) {
		if (time%100 != 0){
			printQueueDetails();
			System.out.println("Checking for jobs that need to be degraded!");
			
			this.checkJobs();
		} else {
			jobUpgrader();
			
			System.out.println("LTS woke up!");
			System.out.println("Checking for processes waiting for memory...");
			
			/* Checking if there are any jobs in the queue waiting for memory */
			int jobsNum = this.noMemoryQueue.size();
			int jobsAdded = 0;
			
			System.out.println("Nomemory queue size: " + jobsNum);
			
			while (this.memoryController.memoryAvailable() > 20) {
				
				/* Going through all processes waiting for memory and giving them memory
				 * if there any available and putting them into priority queue 0 */
				
				if (!this.noMemoryQueue.isEmpty()) {
					
					/* If less then 80% of memory is occupied and acquiring memory is
					 * successful process will be put into a queue */
					
					Process job = new Process();
					
					/* Removes the process from queue */
					
					job = this.noMemoryQueue.get(0);
						
					if (this.memoryController.requestMemory(job.getId(), job.getMemory())) {
						
						/* Sets queues status to unavailable so the job
						 * can be added to queue without data race */
						
						this.queueAvailable = false;
						
						/* Adding a job to a priority queue0 */
						
						this.priorityQueue0.add(job);
						jobsAdded++;
						this.noMemoryQueue.remove(0);
						
						System.out.println("LTS added job to priority queue '0'");
						System.out.println("Process " + job.getId() + " entered queue0");
						
						/* Sets queues status back to available 
						 * so the jobs can be taken from queue */ 
						
						this.queueAvailable = true;	
					}
				}
			}
			
			if (jobsAdded == 1) {
				System.out.println("LTS added 1 job in this season");  
			} else {
				System.out.println("LTS added " + jobsAdded + " jobs in this season.");
			}
			
			System.out.println("LTS going to sleep.");
		}
		
		for (int i = 0; i < 256; i++){
			System.out.println(this.memoryController.locations[i]);
		}
	}
	
	public void startPrioritySystem() {
		System.out.println("Starting priority system.");
	    if (t == null) {
	    	t = new Thread (this, "PQsystemThread");
	        t.start();
	    }
	}
	
	
	public void createProcesses() {
		for (int i = 0; i < 100; i++) {
			Process p = new Process(i*37, i*7%16, 0, i*3%8 + 1);
			this.addJob(p);
		}
	}
	
	/* Processes without memory are added to input queue
	 * waiting to get memory from long term scheduler.
	 * This function is executed to before simulation 
	 * to load all jobs into queue waiting to get memory
	 * from long term scheduler.  */
	
	public void addJob(Process P) {
		System.out.println("Process " + P.getId() + " added to input queue.");
		this.noMemoryQueue.add(P);
	}
	
	/* Short term scheduler takes a job from a queue if accessing queues is enabled. 
	 * Priority queue system can disable access when upgrading and degrading processes. */
	
	public Process getJob() {
		Process retProcess = null;
		
		/* If access to queues is enabled, job is taking following priority rule. */
		
		if (this.queueAvailable) {
			if (!this.priorityQueue0.isEmpty()) {
				retProcess = this.priorityQueue0.remove(0);
				System.out.println("Job taken from queue 0!");
			} else if (!this.priorityQueue1.isEmpty()) {
				retProcess = this.priorityQueue1.remove(0);
				System.out.println("Job taken from queue 1!");
			} else if (!this.priorityQueue2.isEmpty()) {
				retProcess = this.priorityQueue2.remove(0);
				System.out.println("Job taken from queue 2!");
			} else {
				System.out.println("Priority queues are empty. No jobs to take!");
			}
		} else {
			System.out.println("Access to queues denied!");
		}
		
		return retProcess;
	}
	
	/* Queue scheduler - manages job priorities  */
	
	private void checkJobs(){
		if (this.queueAvailable) {
			
			/* Checking if some job from queue1 needs to be degraded */
			
			if (!this.priorityQueue1.isEmpty()) {
				int size = this.priorityQueue1.size();
				System.out.println("Queue1 SIZE: " + size);
				
				for (int i = 0; i < size; i++) {
					if (this.priorityQueue1.get(i).getElapsedTime() > offset + 5 || this.priorityQueue1.get(i).getElapsedTime() < 9) {
						this.priorityQueue2.add(this.priorityQueue1.get(i));
						
						System.out.println("Job " + this.priorityQueue1.get(i).getId() + " degraded from queue 1 to 2");
						
					}
				}
				
				/* Removing duplicate processes from queue1 - The ones that
				 * have been transfered to queue2. */
				
				for (int j = 0; j < this.priorityQueue2.size(); j++) {
					for (int k = 0; k < this.priorityQueue1.size(); k++) {
						if (this.priorityQueue2.get(j).getId() == this.priorityQueue1.get(k).getId()) {
							this.priorityQueue1.remove(k);
							
							break;
						}
					}
				}
			} else {
				System.out.println("Queue1 empty.");
			}
			
			/* Checking if some job from queue0 needs to be degraded */
			
			if (!this.priorityQueue0.isEmpty()) {
				int size = this.priorityQueue0.size();
				
				for (int i = 0; i < size; i++) {
					if (this.priorityQueue0.get(i).getElapsedTime() > offset + 0 || this.priorityQueue0.get(i).getElapsedTime() < 5) {
						this.priorityQueue1.add(this.priorityQueue0.get(i));
						
						System.out.println("Job " + this.priorityQueue0.get(i).getId() + " degraded from queue 0 to 1");
					}
				}
				
				/* Removing duplicate processes from queue0 - The ones that
				 * have been transfered to queue1. */
				
				for (int j = 0; j < this.priorityQueue1.size(); j++) {
					for (int k = 0; k < this.priorityQueue0.size(); k++) {
						if (this.priorityQueue1.get(j).getId() == this.priorityQueue0.get(k).getId()) {
							this.priorityQueue0.remove(k);
							
							break;
						}
					}
				}
			}  else {
				System.out.println("Queue0 empty.");
			}
		} else {
			System.out.println("Access to queues denied!");
		}
	}
	
	/* Periodically jobs need to be upgraded so we do not end up with empty queues 0 and 
	 * 1 and all processes in queue 2 since jobs are executed sequentially in queue 2. */
	
	private void jobUpgrader() {
		int topTime = 0;
		int size;
		
		System.out.println("Job upgrader started.");
		
		if (this.queueAvailable) {
			this.queueAvailable = false;
			
			if (!this.priorityQueue1.isEmpty()) {
				size = this.priorityQueue1.size();
				
				for (int i = 0; i < size; i++) {
					if (this.priorityQueue1.get(i).getElapsedTime() > topTime) {
						topTime = this.priorityQueue1.get(i).getElapsedTime();
					}
				}
				
				for (int j = 0; j < size; j++) {
					System.out.println("Job: " + this.priorityQueue1.get(0).getId() + " upgraded from queue 1 to 0");
					this.priorityQueue0.add(this.priorityQueue1.remove(0));
				}
				
				if (topTime > offset) {
					offset = topTime;
				}
				
				System.out.println(size + " jobs upgraded from queue1 to queue0");
			}
			
			topTime = 0;
			
			if (!this.priorityQueue2.isEmpty()) {
				size = this.priorityQueue2.size();
				
				for (int i = 0; i < size; i++) {
					if (this.priorityQueue2.get(i).getElapsedTime() > topTime) {
						topTime = this.priorityQueue2.get(i).getElapsedTime();
					}
				}
				
				for (int j = 0; j < size; j++) {
					System.out.println("Job: " + this.priorityQueue2.get(0).getId() + " upgraded from queue 2 to 0");
					this.priorityQueue0.add(this.priorityQueue2.remove(0));
				}
				
				
				if (topTime > offset) {
					offset = topTime;
				}
				
				System.out.println(size + " jobs upgraded from queue2 to queue0");
			}
		}
		
		this.queueAvailable = true;
		System.out.println("Job upgrader going to sleep");		
	}
	
	/* Print queue details */
	
	private void printQueueDetails() {
		System.out.println("Priority queues information:");
		System.out.println("Jobs waiting: " + noMemoryQueue.size());
		System.out.println("Queue0: " + this.priorityQueue0.size() + " jobs");
		System.out.println("Queue1: " + this.priorityQueue1.size() + " jobs");
		System.out.println("Queue2: " + this.priorityQueue2.size() + " jobs");
		System.out.println("FINISHED: " + this.finishedQueue.size() + " jobs");
		
		int total = this.noMemoryQueue.size() + this.priorityQueue0.size()
			     + this.priorityQueue1.size() + this.priorityQueue2.size()
			     + this.finishedQueue.size();
		
		System.out.println("Total jobs in queues: " + total);
	}

	@Override
	public void run() {
		System.out.println("Priority system active!");
		
	}

	@Override
	public boolean cpu2queue(Process p) {
		if (this.queueAvailable) {
			if (p.getTime() <= p.getElapsedTime()) {
				p.setStatus("terminated");
				
				this.memoryController.freeMemory(p.getId());
				
				this.finishedQueue.add(p);
			} else {
				this.priorityQueue0.add(p);
			}			
			return true;
		} else {
			return false;
		}
	}

	@Override
	public Process queue2cpu() {
		if (this.queueAvailable) {
			if (!this.priorityQueue0.isEmpty()) {
				return this.priorityQueue0.remove(0);
			} else {
				return new Process();
			}
		} else {
			return new Process();
		}
	}
}
